{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "22a2449c-1063-4b4b-b102-551e18ca094b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e982c647-bf5d-4321-ad13-ec7e86f6b34f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.2.2'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dfcd0e06-071d-479e-ac83-b9bb53806da7",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(r'C:\\sample\\datafiles\\data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "34215576-5abf-44e9-9f53-47ea0ae2fe91",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "0            High income  \n",
       "1             Low income  \n",
       "2    Upper middle income  \n",
       "3    Upper middle income  \n",
       "4            High income  \n",
       "..                   ...  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  \n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "984da031-7368-4105-86de-59adf096854f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2920614138736"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "id(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d25650ef-3189-4215-9ca3-ecd62631ed62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3574d1ea-68d0-49e2-ab64-3d4619bacf1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "195"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "88e52afd-ff41-46ec-b881-87f7c12876ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CountryName', 'CountryCode', 'BirthRate', 'InternetUsers',\n",
       "       'IncomeGroup'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5008775c-56a2-42fa-9a97-d63f6f7d3dbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a40fa152-adf0-4c3e-bacd-a59ef6ae6a60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(195, 5)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "38c195dd-ab42-4292-b6c1-86d593a83c57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CountryName  CountryCode  BirthRate  InternetUsers  IncomeGroup\n",
       "0          False        False      False          False        False\n",
       "1          False        False      False          False        False\n",
       "2          False        False      False          False        False\n",
       "3          False        False      False          False        False\n",
       "4          False        False      False          False        False\n",
       "..           ...          ...        ...            ...          ...\n",
       "190        False        False      False          False        False\n",
       "191        False        False      False          False        False\n",
       "192        False        False      False          False        False\n",
       "193        False        False      False          False        False\n",
       "194        False        False      False          False        False\n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "fb634c3d-d841-4345-b0fd-a8e5aab89ab1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CountryName  CountryCode  BirthRate  InternetUsers  IncomeGroup\n",
       "0          False        False      False          False        False\n",
       "1          False        False      False          False        False\n",
       "2          False        False      False          False        False\n",
       "3          False        False      False          False        False\n",
       "4          False        False      False          False        False\n",
       "..           ...          ...        ...            ...          ...\n",
       "190        False        False      False          False        False\n",
       "191        False        False      False          False        False\n",
       "192        False        False      False          False        False\n",
       "193        False        False      False          False        False\n",
       "194        False        False      False          False        False\n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "19fe0522-11b2-4977-993a-0fcdfba5d584",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CountryName      0\n",
       "CountryCode      0\n",
       "BirthRate        0\n",
       "InternetUsers    0\n",
       "IncomeGroup      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "b318a656-c841-4571-afbf-f96481df650f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                 Aruba         ABW     10.244           78.9   \n",
       "1           Afghanistan         AFG     35.253            5.9   \n",
       "2                Angola         AGO     45.985           19.1   \n",
       "3               Albania         ALB     12.877           57.2   \n",
       "4  United Arab Emirates         ARE     11.044           88.0   \n",
       "\n",
       "           IncomeGroup  \n",
       "0          High income  \n",
       "1           Low income  \n",
       "2  Upper middle income  \n",
       "3  Upper middle income  \n",
       "4          High income  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "1e7f4d3f-c7a8-4d17-87ee-42d258e90f4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.90000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.90000</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.10000</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.20000</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.00000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>ARG</td>\n",
       "      <td>17.716</td>\n",
       "      <td>59.90000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Armenia</td>\n",
       "      <td>ARM</td>\n",
       "      <td>13.308</td>\n",
       "      <td>41.90000</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>ATG</td>\n",
       "      <td>16.447</td>\n",
       "      <td>63.40000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Australia</td>\n",
       "      <td>AUS</td>\n",
       "      <td>13.200</td>\n",
       "      <td>83.00000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Austria</td>\n",
       "      <td>AUT</td>\n",
       "      <td>9.400</td>\n",
       "      <td>80.61880</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Azerbaijan</td>\n",
       "      <td>AZE</td>\n",
       "      <td>18.300</td>\n",
       "      <td>58.70000</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Burundi</td>\n",
       "      <td>BDI</td>\n",
       "      <td>44.151</td>\n",
       "      <td>1.30000</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Belgium</td>\n",
       "      <td>BEL</td>\n",
       "      <td>11.200</td>\n",
       "      <td>82.17020</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Benin</td>\n",
       "      <td>BEN</td>\n",
       "      <td>36.440</td>\n",
       "      <td>4.90000</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Burkina Faso</td>\n",
       "      <td>BFA</td>\n",
       "      <td>40.551</td>\n",
       "      <td>9.10000</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Bangladesh</td>\n",
       "      <td>BGD</td>\n",
       "      <td>20.142</td>\n",
       "      <td>6.63000</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Bulgaria</td>\n",
       "      <td>BGR</td>\n",
       "      <td>9.200</td>\n",
       "      <td>53.06150</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Bahrain</td>\n",
       "      <td>BHR</td>\n",
       "      <td>15.040</td>\n",
       "      <td>90.00004</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Bahamas, The</td>\n",
       "      <td>BHS</td>\n",
       "      <td>15.339</td>\n",
       "      <td>72.00000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Bosnia and Herzegovina</td>\n",
       "      <td>BIH</td>\n",
       "      <td>9.062</td>\n",
       "      <td>57.79000</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                    Aruba         ABW     10.244       78.90000   \n",
       "1              Afghanistan         AFG     35.253        5.90000   \n",
       "2                   Angola         AGO     45.985       19.10000   \n",
       "3                  Albania         ALB     12.877       57.20000   \n",
       "4     United Arab Emirates         ARE     11.044       88.00000   \n",
       "5                Argentina         ARG     17.716       59.90000   \n",
       "6                  Armenia         ARM     13.308       41.90000   \n",
       "7      Antigua and Barbuda         ATG     16.447       63.40000   \n",
       "8                Australia         AUS     13.200       83.00000   \n",
       "9                  Austria         AUT      9.400       80.61880   \n",
       "10              Azerbaijan         AZE     18.300       58.70000   \n",
       "11                 Burundi         BDI     44.151        1.30000   \n",
       "12                 Belgium         BEL     11.200       82.17020   \n",
       "13                   Benin         BEN     36.440        4.90000   \n",
       "14            Burkina Faso         BFA     40.551        9.10000   \n",
       "15              Bangladesh         BGD     20.142        6.63000   \n",
       "16                Bulgaria         BGR      9.200       53.06150   \n",
       "17                 Bahrain         BHR     15.040       90.00004   \n",
       "18            Bahamas, The         BHS     15.339       72.00000   \n",
       "19  Bosnia and Herzegovina         BIH      9.062       57.79000   \n",
       "\n",
       "            IncomeGroup  \n",
       "0           High income  \n",
       "1            Low income  \n",
       "2   Upper middle income  \n",
       "3   Upper middle income  \n",
       "4           High income  \n",
       "5           High income  \n",
       "6   Lower middle income  \n",
       "7           High income  \n",
       "8           High income  \n",
       "9           High income  \n",
       "10  Upper middle income  \n",
       "11           Low income  \n",
       "12          High income  \n",
       "13           Low income  \n",
       "14           Low income  \n",
       "15  Lower middle income  \n",
       "16  Upper middle income  \n",
       "17          High income  \n",
       "18          High income  \n",
       "19  Upper middle income  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "fef41231-fd3f-4675-9d81-de7ebef7c70b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "190       Yemen, Rep.         YEM     32.947           20.0   \n",
       "191      South Africa         ZAF     20.850           46.5   \n",
       "192  Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193            Zambia         ZMB     40.471           15.4   \n",
       "194          Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "dba81f5f-18ae-4925-b773-35aff289ba35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>Virgin Islands (U.S.)</td>\n",
       "      <td>VIR</td>\n",
       "      <td>10.700</td>\n",
       "      <td>45.3</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>186</th>\n",
       "      <td>Vietnam</td>\n",
       "      <td>VNM</td>\n",
       "      <td>15.537</td>\n",
       "      <td>43.9</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>Vanuatu</td>\n",
       "      <td>VUT</td>\n",
       "      <td>26.739</td>\n",
       "      <td>11.3</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>188</th>\n",
       "      <td>West Bank and Gaza</td>\n",
       "      <td>PSE</td>\n",
       "      <td>30.394</td>\n",
       "      <td>46.6</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>189</th>\n",
       "      <td>Samoa</td>\n",
       "      <td>WSM</td>\n",
       "      <td>26.172</td>\n",
       "      <td>15.3</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "185  Virgin Islands (U.S.)         VIR     10.700           45.3   \n",
       "186                Vietnam         VNM     15.537           43.9   \n",
       "187                Vanuatu         VUT     26.739           11.3   \n",
       "188     West Bank and Gaza         PSE     30.394           46.6   \n",
       "189                  Samoa         WSM     26.172           15.3   \n",
       "190            Yemen, Rep.         YEM     32.947           20.0   \n",
       "191           South Africa         ZAF     20.850           46.5   \n",
       "192       Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                 Zambia         ZMB     40.471           15.4   \n",
       "194               Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "185          High income  \n",
       "186  Lower middle income  \n",
       "187  Lower middle income  \n",
       "188  Lower middle income  \n",
       "189  Lower middle income  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  "
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "17f898e0-d8a8-44b7-a70f-3545830900d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CountryName       object\n",
       "CountryCode       object\n",
       "BirthRate        float64\n",
       "InternetUsers    float64\n",
       "IncomeGroup       object\n",
       "dtype: object"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "55f1f6ae-1f12-4c84-b814-4ccaf2bbce43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 195 entries, 0 to 194\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   CountryName    195 non-null    object \n",
      " 1   CountryCode    195 non-null    object \n",
      " 2   BirthRate      195 non-null    float64\n",
      " 3   InternetUsers  195 non-null    float64\n",
      " 4   IncomeGroup    195 non-null    object \n",
      "dtypes: float64(2), object(3)\n",
      "memory usage: 7.7+ KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "274cca76-827e-4c46-9425-8b491cfe76f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#slicing in data frames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "d7db2f2d-8aae-42e0-83b6-4d816fbd7eba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "0            High income  \n",
       "1             Low income  \n",
       "2    Upper middle income  \n",
       "3    Upper middle income  \n",
       "4            High income  \n",
       "..                   ...  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  \n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[:] # this gets full data frame set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "67cdd4b7-08ae-45ba-bf7e-93a406a4f2b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "\n",
       "             IncomeGroup  \n",
       "194           Low income  \n",
       "193  Lower middle income  \n",
       "192           Low income  \n",
       "191  Upper middle income  \n",
       "190  Lower middle income  \n",
       "..                   ...  \n",
       "4            High income  \n",
       "3    Upper middle income  \n",
       "2    Upper middle income  \n",
       "1             Low income  \n",
       "0            High income  \n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "4882ec4d-f418-45d7-9226-5a8795774eb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9000</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1000</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2000</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>ARG</td>\n",
       "      <td>17.716</td>\n",
       "      <td>59.9000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Armenia</td>\n",
       "      <td>ARM</td>\n",
       "      <td>13.308</td>\n",
       "      <td>41.9000</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>ATG</td>\n",
       "      <td>16.447</td>\n",
       "      <td>63.4000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Australia</td>\n",
       "      <td>AUS</td>\n",
       "      <td>13.200</td>\n",
       "      <td>83.0000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Austria</td>\n",
       "      <td>AUT</td>\n",
       "      <td>9.400</td>\n",
       "      <td>80.6188</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Azerbaijan</td>\n",
       "      <td>AZE</td>\n",
       "      <td>18.300</td>\n",
       "      <td>58.7000</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                  Aruba         ABW     10.244        78.9000   \n",
       "1            Afghanistan         AFG     35.253         5.9000   \n",
       "2                 Angola         AGO     45.985        19.1000   \n",
       "3                Albania         ALB     12.877        57.2000   \n",
       "4   United Arab Emirates         ARE     11.044        88.0000   \n",
       "5              Argentina         ARG     17.716        59.9000   \n",
       "6                Armenia         ARM     13.308        41.9000   \n",
       "7    Antigua and Barbuda         ATG     16.447        63.4000   \n",
       "8              Australia         AUS     13.200        83.0000   \n",
       "9                Austria         AUT      9.400        80.6188   \n",
       "10            Azerbaijan         AZE     18.300        58.7000   \n",
       "\n",
       "            IncomeGroup  \n",
       "0           High income  \n",
       "1            Low income  \n",
       "2   Upper middle income  \n",
       "3   Upper middle income  \n",
       "4           High income  \n",
       "5           High income  \n",
       "6   Lower middle income  \n",
       "7           High income  \n",
       "8           High income  \n",
       "9           High income  \n",
       "10  Upper middle income  "
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[:11]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "55d978dc-1040-4447-8436-d7d49bc8a31a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.900000</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>Ecuador</td>\n",
       "      <td>ECU</td>\n",
       "      <td>21.070</td>\n",
       "      <td>40.353684</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>Libya</td>\n",
       "      <td>LBY</td>\n",
       "      <td>21.425</td>\n",
       "      <td>16.500000</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>33.477</td>\n",
       "      <td>22.700000</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    CountryName CountryCode  BirthRate  InternetUsers          IncomeGroup\n",
       "0         Aruba         ABW     10.244      78.900000          High income\n",
       "50      Ecuador         ECU     21.070      40.353684  Upper middle income\n",
       "100       Libya         LBY     21.425      16.500000  Upper middle income\n",
       "150       Sudan         SDN     33.477      22.700000  Lower middle income"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[0:200:50]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "295eea54-e2a4-4f84-916f-70bf556921c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "0            High income  \n",
       "1             Low income  \n",
       "2    Upper middle income  \n",
       "3    Upper middle income  \n",
       "4            High income  \n",
       "..                   ...  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  \n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "2dbd7556-093f-458b-a047-957973d0dce8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "0            High income  \n",
       "1             Low income  \n",
       "2    Upper middle income  \n",
       "3    Upper middle income  \n",
       "4            High income  \n",
       "..                   ...  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  \n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['CountryName', 'CountryCode', 'BirthRate', 'InternetUsers', 'IncomeGroup']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "dfef12f6-1f8e-4e9a-b83b-ec929f154bb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>195.000000</td>\n",
       "      <td>195.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>21.469928</td>\n",
       "      <td>42.076471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>10.605467</td>\n",
       "      <td>29.030788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>7.900000</td>\n",
       "      <td>0.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>12.120500</td>\n",
       "      <td>14.520000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>19.680000</td>\n",
       "      <td>41.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>29.759500</td>\n",
       "      <td>66.225000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>49.661000</td>\n",
       "      <td>96.546800</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        BirthRate  InternetUsers\n",
       "count  195.000000     195.000000\n",
       "mean    21.469928      42.076471\n",
       "std     10.605467      29.030788\n",
       "min      7.900000       0.900000\n",
       "25%     12.120500      14.520000\n",
       "50%     19.680000      41.000000\n",
       "75%     29.759500      66.225000\n",
       "max     49.661000      96.546800"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# descriptive\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "2e11242c-0071-42d0-906b-3d06bfb9985c",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_categorize = df[['CountryName', 'CountryCode', 'IncomeGroup']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "9fd03efb-b3eb-44b4-944b-c24b8ed4d544",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode          IncomeGroup\n",
       "0                   Aruba         ABW          High income\n",
       "1             Afghanistan         AFG           Low income\n",
       "2                  Angola         AGO  Upper middle income\n",
       "3                 Albania         ALB  Upper middle income\n",
       "4    United Arab Emirates         ARE          High income\n",
       "..                    ...         ...                  ...\n",
       "190           Yemen, Rep.         YEM  Lower middle income\n",
       "191          South Africa         ZAF  Upper middle income\n",
       "192      Congo, Dem. Rep.         COD           Low income\n",
       "193                Zambia         ZMB  Lower middle income\n",
       "194              Zimbabwe         ZWE           Low income\n",
       "\n",
       "[195 rows x 3 columns]"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_categorize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "6a1d8581-59fc-4749-8423-95e4a8dc6fe7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>195</td>\n",
       "      <td>195</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>195</td>\n",
       "      <td>195</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       CountryName CountryCode  IncomeGroup\n",
       "count          195         195          195\n",
       "unique         195         195            4\n",
       "top          Aruba         ABW  High income\n",
       "freq             1           1           67"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_categorize.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "c8f0f1fd-0396-4cee-8d03-23aa29d71e26",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>195</td>\n",
       "      <td>195</td>\n",
       "      <td>195.000000</td>\n",
       "      <td>195.000000</td>\n",
       "      <td>195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>195</td>\n",
       "      <td>195</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>21.469928</td>\n",
       "      <td>42.076471</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.605467</td>\n",
       "      <td>29.030788</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.900000</td>\n",
       "      <td>0.900000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.120500</td>\n",
       "      <td>14.520000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>19.680000</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.759500</td>\n",
       "      <td>66.225000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49.661000</td>\n",
       "      <td>96.546800</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       CountryName CountryCode   BirthRate  InternetUsers  IncomeGroup\n",
       "count          195         195  195.000000     195.000000          195\n",
       "unique         195         195         NaN            NaN            4\n",
       "top          Aruba         ABW         NaN            NaN  High income\n",
       "freq             1           1         NaN            NaN           67\n",
       "mean           NaN         NaN   21.469928      42.076471          NaN\n",
       "std            NaN         NaN   10.605467      29.030788          NaN\n",
       "min            NaN         NaN    7.900000       0.900000          NaN\n",
       "25%            NaN         NaN   12.120500      14.520000          NaN\n",
       "50%            NaN         NaN   19.680000      41.000000          NaN\n",
       "75%            NaN         NaN   29.759500      66.225000          NaN\n",
       "max            NaN         NaN   49.661000      96.546800          NaN"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "05461dd3-4323-49dc-9d13-99679ebbc7b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "0            High income  \n",
       "1             Low income  \n",
       "2    Upper middle income  \n",
       "3    Upper middle income  \n",
       "4            High income  \n",
       "..                   ...  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  \n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "2deeba20-4619-4e89-b565-386dde88825d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CountryName', 'CountryCode', 'BirthRate', 'InternetUsers',\n",
       "       'IncomeGroup'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "49c0e1e6-9e58-4262-84ac-be08e78edeee",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns = ['a','b','c','d','e']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "1b4ffc9e-f708-4e17-8211-1a640de47053",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "      <th>d</th>\n",
       "      <th>e</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        a    b       c     d                    e\n",
       "0                   Aruba  ABW  10.244  78.9          High income\n",
       "1             Afghanistan  AFG  35.253   5.9           Low income\n",
       "2                  Angola  AGO  45.985  19.1  Upper middle income\n",
       "3                 Albania  ALB  12.877  57.2  Upper middle income\n",
       "4    United Arab Emirates  ARE  11.044  88.0          High income\n",
       "..                    ...  ...     ...   ...                  ...\n",
       "190           Yemen, Rep.  YEM  32.947  20.0  Lower middle income\n",
       "191          South Africa  ZAF  20.850  46.5  Upper middle income\n",
       "192      Congo, Dem. Rep.  COD  42.394   2.2           Low income\n",
       "193                Zambia  ZMB  40.471  15.4  Lower middle income\n",
       "194              Zimbabwe  ZWE  35.715  18.5           Low income\n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "d29a6dd7-a9d0-43c8-80f4-3224610e8a07",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns = ['CountryName', 'CountryCode', 'BirthRate', 'InternetUsers',\n",
    "       'IncomeGroup']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "e9bf536e-5bd3-4382-a3b3-625edf7a1349",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "0            High income  \n",
       "1             Low income  \n",
       "2    Upper middle income  \n",
       "3    Upper middle income  \n",
       "4            High income  \n",
       "..                   ...  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  \n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "2266283f-0cdf-4a03-b0de-afa8a1533541",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>10.244</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>35.253</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>45.985</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>12.877</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>11.044</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>32.947</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>20.850</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>42.394</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>40.471</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>35.715</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName  BirthRate          IncomeGroup\n",
       "0                   Aruba     10.244          High income\n",
       "1             Afghanistan     35.253           Low income\n",
       "2                  Angola     45.985  Upper middle income\n",
       "3                 Albania     12.877  Upper middle income\n",
       "4    United Arab Emirates     11.044          High income\n",
       "..                    ...        ...                  ...\n",
       "190           Yemen, Rep.     32.947  Lower middle income\n",
       "191          South Africa     20.850  Upper middle income\n",
       "192      Congo, Dem. Rep.     42.394           Low income\n",
       "193                Zambia     40.471  Lower middle income\n",
       "194              Zimbabwe     35.715           Low income\n",
       "\n",
       "[195 rows x 3 columns]"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['CountryName', 'BirthRate', 'IncomeGroup']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "73a57fe2-d9d3-48e2-85a8-6e54d8079ae0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      808.2516\n",
       "1      207.9927\n",
       "2      878.3135\n",
       "3      736.5644\n",
       "4      971.8720\n",
       "         ...   \n",
       "190    658.9400\n",
       "191    969.5250\n",
       "192     93.2668\n",
       "193    623.2534\n",
       "194    660.7275\n",
       "Length: 195, dtype: float64"
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.BirthRate * df.InternetUsers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "b7e55cd5-67c1-4591-aa49-59ea38f292af",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['myCalc'] = df.BirthRate * df.InternetUsers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "78256d9a-6326-469a-8ba3-e13d00677d69",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "      <th>myCalc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "      <td>808.2516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "      <td>207.9927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "      <td>878.3135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "      <td>736.5644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "      <td>971.8720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>658.9400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "      <td>969.5250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "      <td>93.2668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>623.2534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "      <td>660.7275</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup    myCalc  \n",
       "0            High income  808.2516  \n",
       "1             Low income  207.9927  \n",
       "2    Upper middle income  878.3135  \n",
       "3    Upper middle income  736.5644  \n",
       "4            High income  971.8720  \n",
       "..                   ...       ...  \n",
       "190  Lower middle income  658.9400  \n",
       "191  Upper middle income  969.5250  \n",
       "192           Low income   93.2668  \n",
       "193  Lower middle income  623.2534  \n",
       "194           Low income  660.7275  \n",
       "\n",
       "[195 rows x 6 columns]"
      ]
     },
     "execution_count": 200,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "11500a5a-5dbb-44cf-891d-fca96886ac19",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop('myCalc', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "c4954d3c-cb48-495d-99fb-befbc5e87ebf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "0            High income  \n",
       "1             Low income  \n",
       "2    Upper middle income  \n",
       "3    Upper middle income  \n",
       "4            High income  \n",
       "..                   ...  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  \n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "b512ef83-de34-4040-b583-a6d6f7f26c17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['CountryName', 'CountryCode', 'BirthRate', 'InternetUsers',\n",
       "       'IncomeGroup'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "3c878a3d-2cec-43b4-81b9-72cfa4759d7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['InternetUsers'], dtype='object')"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns[3:4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "e8545191-d035-4cdc-948d-cae8938b9b90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(195, 5)"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "2c222a14-74d6-447c-a387-f78a7e2520ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      78.9\n",
       "1       5.9\n",
       "2      19.1\n",
       "3      57.2\n",
       "4      88.0\n",
       "       ... \n",
       "190    20.0\n",
       "191    46.5\n",
       "192     2.2\n",
       "193    15.4\n",
       "194    18.5\n",
       "Name: InternetUsers, Length: 195, dtype: float64"
      ]
     },
     "execution_count": 235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['InternetUsers']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "f72a6fde-f175-4c87-b59f-88d65e2b2ec1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      False\n",
       "1      False\n",
       "2      False\n",
       "3      False\n",
       "4      False\n",
       "       ...  \n",
       "190    False\n",
       "191    False\n",
       "192    False\n",
       "193    False\n",
       "194    False\n",
       "Name: InternetUsers, Length: 195, dtype: bool"
      ]
     },
     "execution_count": 240,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.InternetUsers < 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "240d5037-8b97-4a0e-85eb-72c3f4cb6a41",
   "metadata": {},
   "outputs": [],
   "source": [
    "Filter = df.InternetUsers < 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "30a4b74b-2f9b-4a42-93c6-ea192c0870be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Burundi</td>\n",
       "      <td>BDI</td>\n",
       "      <td>44.151</td>\n",
       "      <td>1.3</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>Eritrea</td>\n",
       "      <td>ERI</td>\n",
       "      <td>34.800</td>\n",
       "      <td>0.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>Ethiopia</td>\n",
       "      <td>ETH</td>\n",
       "      <td>32.925</td>\n",
       "      <td>1.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>64</th>\n",
       "      <td>Guinea</td>\n",
       "      <td>GIN</td>\n",
       "      <td>37.337</td>\n",
       "      <td>1.6</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>Myanmar</td>\n",
       "      <td>MMR</td>\n",
       "      <td>18.119</td>\n",
       "      <td>1.6</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>Niger</td>\n",
       "      <td>NER</td>\n",
       "      <td>49.661</td>\n",
       "      <td>1.7</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>Sierra Leone</td>\n",
       "      <td>SLE</td>\n",
       "      <td>36.729</td>\n",
       "      <td>1.7</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>Somalia</td>\n",
       "      <td>SOM</td>\n",
       "      <td>43.891</td>\n",
       "      <td>1.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>Timor-Leste</td>\n",
       "      <td>TLS</td>\n",
       "      <td>35.755</td>\n",
       "      <td>1.1</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      CountryName CountryCode  BirthRate  InternetUsers          IncomeGroup\n",
       "11        Burundi         BDI     44.151            1.3           Low income\n",
       "52        Eritrea         ERI     34.800            0.9           Low income\n",
       "55       Ethiopia         ETH     32.925            1.9           Low income\n",
       "64         Guinea         GIN     37.337            1.6           Low income\n",
       "117       Myanmar         MMR     18.119            1.6  Lower middle income\n",
       "127         Niger         NER     49.661            1.7           Low income\n",
       "154  Sierra Leone         SLE     36.729            1.7           Low income\n",
       "156       Somalia         SOM     43.891            1.5           Low income\n",
       "172   Timor-Leste         TLS     35.755            1.1  Lower middle income"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[Filter]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "id": "efbf504c-0624-42f7-b5ed-a901251b1041",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 260,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[Filter])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "id": "313da02b-ac37-4738-86b2-b0e6ca1aaa8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      False\n",
       "1      False\n",
       "2       True\n",
       "3      False\n",
       "4      False\n",
       "       ...  \n",
       "190    False\n",
       "191    False\n",
       "192     True\n",
       "193     True\n",
       "194    False\n",
       "Name: BirthRate, Length: 195, dtype: bool"
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.BirthRate  > 40"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "id": "52329ccb-93a9-4ee8-9098-39b7243a9a72",
   "metadata": {},
   "outputs": [],
   "source": [
    "Filter2 = df.BirthRate  > 40"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "id": "5f04a8b5-0ab3-466b-b150-16e977301fa6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Burundi</td>\n",
       "      <td>BDI</td>\n",
       "      <td>44.151</td>\n",
       "      <td>1.3</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Burkina Faso</td>\n",
       "      <td>BFA</td>\n",
       "      <td>40.551</td>\n",
       "      <td>9.1</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65</th>\n",
       "      <td>Gambia, The</td>\n",
       "      <td>GMB</td>\n",
       "      <td>42.525</td>\n",
       "      <td>14.0</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>Mali</td>\n",
       "      <td>MLI</td>\n",
       "      <td>44.138</td>\n",
       "      <td>3.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>Niger</td>\n",
       "      <td>NER</td>\n",
       "      <td>49.661</td>\n",
       "      <td>1.7</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>128</th>\n",
       "      <td>Nigeria</td>\n",
       "      <td>NGA</td>\n",
       "      <td>40.045</td>\n",
       "      <td>38.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>Somalia</td>\n",
       "      <td>SOM</td>\n",
       "      <td>43.891</td>\n",
       "      <td>1.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>167</th>\n",
       "      <td>Chad</td>\n",
       "      <td>TCD</td>\n",
       "      <td>45.745</td>\n",
       "      <td>2.3</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>Uganda</td>\n",
       "      <td>UGA</td>\n",
       "      <td>43.474</td>\n",
       "      <td>16.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "2              Angola         AGO     45.985           19.1   \n",
       "11            Burundi         BDI     44.151            1.3   \n",
       "14       Burkina Faso         BFA     40.551            9.1   \n",
       "65        Gambia, The         GMB     42.525           14.0   \n",
       "115              Mali         MLI     44.138            3.5   \n",
       "127             Niger         NER     49.661            1.7   \n",
       "128           Nigeria         NGA     40.045           38.0   \n",
       "156           Somalia         SOM     43.891            1.5   \n",
       "167              Chad         TCD     45.745            2.3   \n",
       "178            Uganda         UGA     43.474           16.2   \n",
       "192  Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193            Zambia         ZMB     40.471           15.4   \n",
       "\n",
       "             IncomeGroup  \n",
       "2    Upper middle income  \n",
       "11            Low income  \n",
       "14            Low income  \n",
       "65            Low income  \n",
       "115           Low income  \n",
       "127           Low income  \n",
       "128  Lower middle income  \n",
       "156           Low income  \n",
       "167           Low income  \n",
       "178           Low income  \n",
       "192           Low income  \n",
       "193  Lower middle income  "
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[Filter2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "769efae9-45a2-473f-a4f3-2f92091b65fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      False\n",
       "1      False\n",
       "2      False\n",
       "3      False\n",
       "4      False\n",
       "       ...  \n",
       "190    False\n",
       "191    False\n",
       "192    False\n",
       "193    False\n",
       "194    False\n",
       "Length: 195, dtype: bool"
      ]
     },
     "execution_count": 276,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Filter & Filter2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "id": "aee6277e-3d8c-4a52-aa3a-8406ca5f22bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Burundi</td>\n",
       "      <td>BDI</td>\n",
       "      <td>44.151</td>\n",
       "      <td>1.3</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>Niger</td>\n",
       "      <td>NER</td>\n",
       "      <td>49.661</td>\n",
       "      <td>1.7</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>Somalia</td>\n",
       "      <td>SOM</td>\n",
       "      <td>43.891</td>\n",
       "      <td>1.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    CountryName CountryCode  BirthRate  InternetUsers IncomeGroup\n",
       "11      Burundi         BDI     44.151            1.3  Low income\n",
       "127       Niger         NER     49.661            1.7  Low income\n",
       "156     Somalia         SOM     43.891            1.5  Low income"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[Filter & Filter2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "id": "fc35fbcf-da5e-4def-8fd2-f30ea0a873d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Burundi</td>\n",
       "      <td>BDI</td>\n",
       "      <td>44.151</td>\n",
       "      <td>1.3</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>Niger</td>\n",
       "      <td>NER</td>\n",
       "      <td>49.661</td>\n",
       "      <td>1.7</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>156</th>\n",
       "      <td>Somalia</td>\n",
       "      <td>SOM</td>\n",
       "      <td>43.891</td>\n",
       "      <td>1.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    CountryName CountryCode  BirthRate  InternetUsers IncomeGroup\n",
       "11      Burundi         BDI     44.151            1.3  Low income\n",
       "127       Niger         NER     49.661            1.7  Low income\n",
       "156     Somalia         SOM     43.891            1.5  Low income"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df.BirthRate > 40) & (df.InternetUsers < 2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "id": "916526bc-e5e2-4265-89b2-101e98462f31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.90</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.00</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Argentina</td>\n",
       "      <td>ARG</td>\n",
       "      <td>17.716</td>\n",
       "      <td>59.90</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "      <td>ATG</td>\n",
       "      <td>16.447</td>\n",
       "      <td>63.40</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Australia</td>\n",
       "      <td>AUS</td>\n",
       "      <td>13.200</td>\n",
       "      <td>83.00</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>174</th>\n",
       "      <td>Trinidad and Tobago</td>\n",
       "      <td>TTO</td>\n",
       "      <td>14.590</td>\n",
       "      <td>63.80</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>Uruguay</td>\n",
       "      <td>URY</td>\n",
       "      <td>14.374</td>\n",
       "      <td>57.69</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>181</th>\n",
       "      <td>United States</td>\n",
       "      <td>USA</td>\n",
       "      <td>12.500</td>\n",
       "      <td>84.20</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>Venezuela, RB</td>\n",
       "      <td>VEN</td>\n",
       "      <td>19.842</td>\n",
       "      <td>54.90</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>185</th>\n",
       "      <td>Virgin Islands (U.S.)</td>\n",
       "      <td>VIR</td>\n",
       "      <td>10.700</td>\n",
       "      <td>45.30</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               CountryName CountryCode  BirthRate  InternetUsers  IncomeGroup\n",
       "0                    Aruba         ABW     10.244          78.90  High income\n",
       "4     United Arab Emirates         ARE     11.044          88.00  High income\n",
       "5                Argentina         ARG     17.716          59.90  High income\n",
       "7      Antigua and Barbuda         ATG     16.447          63.40  High income\n",
       "8                Australia         AUS     13.200          83.00  High income\n",
       "..                     ...         ...        ...            ...          ...\n",
       "174    Trinidad and Tobago         TTO     14.590          63.80  High income\n",
       "180                Uruguay         URY     14.374          57.69  High income\n",
       "181          United States         USA     12.500          84.20  High income\n",
       "184          Venezuela, RB         VEN     19.842          54.90  High income\n",
       "185  Virgin Islands (U.S.)         VIR     10.700          45.30  High income\n",
       "\n",
       "[67 rows x 5 columns]"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.IncomeGroup == 'High income']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "44ab625d-7fd5-4b08-b797-1400c468a28d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['High income', 'Low income', 'Upper middle income',\n",
       "       'Lower middle income'], dtype=object)"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.IncomeGroup.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "id": "b56abfea-45a6-4b5d-b4a3-7374419bfa46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 307,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.IncomeGroup.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "id": "bd8e1eda-d608-407c-b346-cd1012543ca1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Introduction to seaborn (seaborn is a very powerful statistical visulization package in python)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "id": "31a51c5c-470c-45cd-94bd-fa8d6e5c6ec2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt # visualization\n",
    "import seaborn as snsb # distributive visualization\n",
    "\n",
    "%matplotlib inline\n",
    "plt.rcParams['figure.figsize'] = 6,3\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "id": "86b92d75-e88e-4587-9056-a767ab95c69e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                 Aruba         ABW     10.244           78.9   \n",
       "1           Afghanistan         AFG     35.253            5.9   \n",
       "2                Angola         AGO     45.985           19.1   \n",
       "3               Albania         ALB     12.877           57.2   \n",
       "4  United Arab Emirates         ARE     11.044           88.0   \n",
       "\n",
       "           IncomeGroup  \n",
       "0          High income  \n",
       "1           Low income  \n",
       "2  Upper middle income  \n",
       "3  Upper middle income  \n",
       "4          High income  "
      ]
     },
     "execution_count": 331,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "id": "4712abd2-8a09-40c7-8fdf-a98a837d2bd5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      78.9\n",
       "1       5.9\n",
       "2      19.1\n",
       "3      57.2\n",
       "4      88.0\n",
       "       ... \n",
       "190    20.0\n",
       "191    46.5\n",
       "192     2.2\n",
       "193    15.4\n",
       "194    18.5\n",
       "Name: InternetUsers, Length: 195, dtype: float64"
      ]
     },
     "execution_count": 335,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['InternetUsers']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "id": "5c0003a5-757d-48e1-bc2c-46f398590c83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Distributions\n",
    "vis1 = snsb.distplot(df['InternetUsers'])\n",
    "plt.show(vis1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "id": "64cacca4-6ece-4c34-b054-91830efd9818",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "vis2 = snsb.displot(df['InternetUsers'])\n",
    "plt.show(vis2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "id": "3621bd1b-4894-418e-aba0-0ce20a033040",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgQAAAH4CAYAAAA1uvVpAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABVgklEQVR4nO3deVzUdf4H8NcczAy3XDKAHIMniicoSlJahmltalpmm8eWbmxrpvxs1U6zWjtc121NrdZMO8zdtJtSrERN8kA88kTkFkRAGM45v78/kKkJVI6B7wy8no/HPJTvfGa+748ivubz/Xw/H4kgCAKIiIioS5OKXQARERGJj4GAiIiIGAiIiIiIgYCIiIjAQEBERERgICAiIiIwEBAREREYCIiIiAgMBK0mCAK0Wi24rhMREXUGDAStVFlZCU9PT1RWVopdChERUZuJHgjWrVsHjUYDlUqFqKgo7Nu374btU1JSEBUVBZVKhfDwcGzYsMHq+XfffRdxcXHw8vKCl5cXxo0bh0OHDlm1Wb58OSQSidVDrVbbvG9ERESOQtRAsG3bNixcuBDPPPMM0tPTERcXhwkTJiA3N7fJ9llZWZg4cSLi4uKQnp6Op59+GgsWLMD27dstbfbs2YMZM2bgxx9/RGpqKkJCQhAfH4+CggKr9xowYAAKCwstj5MnT7ZrX4mIiOyZRMzNjWJiYjBs2DCsX7/eciwiIgKTJ0/GypUrG7VfsmQJvvzyS5w5c8ZyLCEhAcePH0dqamqT5zCZTPDy8sLatWsxa9YsAPUjBJ9//jmOHTvW6tq1Wi08PT1RUVEBDw+PVr8PERGRPRBthECv1yMtLQ3x8fFWx+Pj43HgwIEmX5Oamtqo/fjx43HkyBEYDIYmX1NTUwODwQBvb2+r4xkZGQgMDIRGo8GDDz6IixcvtqE3REREjk20QFBSUgKTyQR/f3+r4/7+/igqKmryNUVFRU22NxqNKCkpafI1S5cuRVBQEMaNG2c5FhMTgy1btmDnzp149913UVRUhNjYWJSWll63Xp1OB61Wa/UgIiLqLESfVCiRSKy+FgSh0bGbtW/qOAC8/vrr2Lp1K3bs2AGVSmU5PmHCBEydOhUDBw7EuHHj8M033wAANm/efN3zrly5Ep6enpZHcHDwzTtHRETkIEQLBL6+vpDJZI1GA4qLixuNAjRQq9VNtpfL5fDx8bE6vmrVKvz973/Hrl27MGjQoBvW4urqioEDByIjI+O6bZYtW4aKigrLIy8v74bvSURE5EhECwQKhQJRUVFITk62Op6cnIzY2NgmXzNq1KhG7Xft2oXo6Gg4OTlZjr3xxht46aWX8N133yE6Ovqmteh0Opw5cwYBAQHXbaNUKuHh4WH1ICIi6ixEvWSQmJiI//znP3jvvfdw5swZLFq0CLm5uUhISABQ/6m84c4AoP6OgpycHCQmJuLMmTN47733sHHjRixevNjS5vXXX8ezzz6L9957D2FhYSgqKkJRURGqqqosbRYvXoyUlBRkZWXh4MGDmDZtGrRaLWbPnt1xnSciIrIjcjFPPn36dJSWlmLFihUoLCxEZGQkkpKSEBoaCgAoLCy0WpNAo9EgKSkJixYtwltvvYXAwEC8+eabmDp1qqXNunXroNfrMW3aNKtzvfDCC1i+fDkAID8/HzNmzEBJSQn8/PwwcuRI/Pzzz5bzEhERdTWirkPgyLgOARERdSai32VARERE4mMgICIiIgYCIiIiYiAgIiIiMBAQERERGAiIiIgIDAREREQEBgIiIiICAwERERFB5KWLiVrr44O5N290Aw/FhNioEiKizoEjBERERMRAQERERAwEREREBAYCIiIiAgMBERERgYGAiIiIwEBAREREYCAgIiIiMBAQERERGAiIiIgIDAREREQEBgIiIiICAwERERGBgYCIiIjAQEBERERgICAiIiIwEBAREREYCIiIiAgMBERERAQGAiIiIgIDAREREYGBgIiIiMBAQERERGAgICIiIjAQEBERERgIiIiICAwEREREBAYCIiIiAgMBERERgYGAiIiIwEBAREREYCAgIiIiMBAQERERGAiIiIgIDAREREQEBgIiIiICAwERERGBgYCIiIjAQEBERERgICAiIiIwEBAREREYCIiIiAgMBERERAQGAiIiIgIDAREREYGBgIiIiMBAQERERGAgICIiIjAQEBERERgIiIiICAwEREREBAYCIiIiAgMBERERgYGAiIiIwEBAREREYCAgIiIiMBAQERERGAiIiIgIDAREREQEBgIiIiICAwERERGBgYCIiIjAQEBERERgICAiIiIwEBAREREYCIiIiAh2EAjWrVsHjUYDlUqFqKgo7Nu374btU1JSEBUVBZVKhfDwcGzYsMHq+XfffRdxcXHw8vKCl5cXxo0bh0OHDrX5vERERJ2ZqIFg27ZtWLhwIZ555hmkp6cjLi4OEyZMQG5ubpPts7KyMHHiRMTFxSE9PR1PP/00FixYgO3bt1va7NmzBzNmzMCPP/6I1NRUhISEID4+HgUFBa0+LxERUWcnEQRBEOvkMTExGDZsGNavX285FhERgcmTJ2PlypWN2i9ZsgRffvklzpw5YzmWkJCA48ePIzU1tclzmEwmeHl5Ye3atZg1a1arztsUrVYLT09PVFRUwMPDo1mvIdv5+GDbwttDMSE2qoSIqHMQbYRAr9cjLS0N8fHxVsfj4+Nx4MCBJl+TmpraqP348eNx5MgRGAyGJl9TU1MDg8EAb2/vVp+XiIios5OLdeKSkhKYTCb4+/tbHff390dRUVGTrykqKmqyvdFoRElJCQICAhq9ZunSpQgKCsK4ceNafV4A0Ol00Ol0lq+1Wu2NO0hERORARJ9UKJFIrL4WBKHRsZu1b+o4ALz++uvYunUrduzYAZVK1abzrly5Ep6enpZHcHDwddsSERE5GtECga+vL2QyWaNP5cXFxY0+vTdQq9VNtpfL5fDx8bE6vmrVKvz973/Hrl27MGjQoDadFwCWLVuGiooKyyMvL69Z/SQiInIEogUChUKBqKgoJCcnWx1PTk5GbGxsk68ZNWpUo/a7du1CdHQ0nJycLMfeeOMNvPTSS/juu+8QHR3d5vMCgFKphIeHh9WDiIiosxBtDgEAJCYmYubMmYiOjsaoUaPwzjvvIDc3FwkJCQDqP5UXFBRgy5YtAOrvKFi7di0SExMxb948pKamYuPGjdi6davlPV9//XU899xz+PjjjxEWFmYZCXBzc4Obm1uzzktERNTViBoIpk+fjtLSUqxYsQKFhYWIjIxEUlISQkNDAQCFhYVWawNoNBokJSVh0aJFeOuttxAYGIg333wTU6dOtbRZt24d9Ho9pk2bZnWuF154AcuXL2/WeYmIiLoaUdchcGRch0BcXIeAiMi2RL/LgIiIiMTHQEBEREQMBERERMRAQERERGAgICIiIjAQEBERERgIiIiICAwEREREBAYCIiIiAgMBERERgYGAiIiIwEBAREREYCAgIiIiMBAQERERGAiIiIgIDAREREQEBgIiIiICAwERERGBgYCIiIjAQEBERERgICAiIiIwEBAREREYCIiIiAgMBERERAQGAiIiIgIDAREREYGBgIiIiMBAQERERGAgICIiIjAQEBERERgIiIiICAwEREREBAYCIiIiAgMBERERgYGAiIiIwEBAREREYCAgIiIiMBAQERERGAiIiIgIDAREREQEBgIiIiICAwERERGBgYCIiIjAQEBERERgICAiIiIwEBAREREYCIiIiAgMBERERAQGAiIiIgIDAREREYGBgIiIiMBAQERERGAgICIiIjAQEBERERgIiIiICAwEREREBAYCIiIiAgMBERERgYGAiIiIwEBAREREYCAgIiIiMBAQERERALnYBRA5oo8P5rb6tQ/FhNiwEiIi2+AIARERETEQEBEREQMBERERgYGAiIiIwEBAREREYCAgIiIiMBAQERERGAiIiIgIDAREREQEBgIiIiICAwERERGBgYCIiIjAQEBERESwg0Cwbt06aDQaqFQqREVFYd++fTdsn5KSgqioKKhUKoSHh2PDhg1Wz586dQpTp05FWFgYJBIJ1qxZ0+g9li9fDolEYvVQq9W27BYREZFDETUQbNu2DQsXLsQzzzyD9PR0xMXFYcKECcjNbXpr2aysLEycOBFxcXFIT0/H008/jQULFmD79u2WNjU1NQgPD8err756w//kBwwYgMLCQsvj5MmTNu8fERGRo5CLefLVq1fj0Ucfxdy5cwEAa9aswc6dO7F+/XqsXLmyUfsNGzYgJCTE8qk/IiICR44cwapVqzB16lQAwPDhwzF8+HAAwNKlS697brlczlEBIiKia0QbIdDr9UhLS0N8fLzV8fj4eBw4cKDJ16SmpjZqP378eBw5cgQGg6FF58/IyEBgYCA0Gg0efPBBXLx4sWUdICIi6kRECwQlJSUwmUzw9/e3Ou7v74+ioqImX1NUVNRke6PRiJKSkmafOyYmBlu2bMHOnTvx7rvvoqioCLGxsSgtLb3ua3Q6HbRardWDiIiosxB9UqFEIrH6WhCERsdu1r6p4zcyYcIETJ06FQMHDsS4cePwzTffAAA2b9583desXLkSnp6elkdwcHCzz0dERGTvRAsEvr6+kMlkjUYDiouLG40CNFCr1U22l8vl8PHxaXUtrq6uGDhwIDIyMq7bZtmyZaioqLA88vLyWn0+IiIieyNaIFAoFIiKikJycrLV8eTkZMTGxjb5mlGjRjVqv2vXLkRHR8PJyanVteh0Opw5cwYBAQHX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",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "vis2 = snsb.distplot(df['InternetUsers'], bins=15)\n",
    "plt.show(vis2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "id": "1eec4da6-1620-4c88-a534-05fe5863d29b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# BOX PLOT (Bi-Varient analysis)\n",
    "vis4 = snsb.boxplot(data = df, x='IncomeGroup', y='BirthRate')\n",
    "plt.show(vis4)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 416,
   "id": "19caeb74-db46-4c54-a9e1-c674ee4ce198",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Linear model plot\n",
    "vis5 = snsb.lmplot(data = df, x = 'InternetUsers', y = 'BirthRate')\n",
    "plt.show(vis5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "f8b2d610-d520-47a3-aa92-d3a2b9257ee6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 699.25x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "vi6 = snsb.lmplot(data = df, x ='InternetUsers', y ='BirthRate', fit_reg= False, hue='IncomeGroup') # hue for color\n",
    "plt.show(vi6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "id": "85b66551-e3a1-4aee-9d70-94f592bbe3e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CountryName</th>\n",
       "      <th>CountryCode</th>\n",
       "      <th>BirthRate</th>\n",
       "      <th>InternetUsers</th>\n",
       "      <th>IncomeGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>10.244</td>\n",
       "      <td>78.9</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>35.253</td>\n",
       "      <td>5.9</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>45.985</td>\n",
       "      <td>19.1</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Albania</td>\n",
       "      <td>ALB</td>\n",
       "      <td>12.877</td>\n",
       "      <td>57.2</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>ARE</td>\n",
       "      <td>11.044</td>\n",
       "      <td>88.0</td>\n",
       "      <td>High income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>Yemen, Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>32.947</td>\n",
       "      <td>20.0</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>191</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>20.850</td>\n",
       "      <td>46.5</td>\n",
       "      <td>Upper middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>Congo, Dem. Rep.</td>\n",
       "      <td>COD</td>\n",
       "      <td>42.394</td>\n",
       "      <td>2.2</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>40.471</td>\n",
       "      <td>15.4</td>\n",
       "      <td>Lower middle income</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>194</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>35.715</td>\n",
       "      <td>18.5</td>\n",
       "      <td>Low income</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>195 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              CountryName CountryCode  BirthRate  InternetUsers  \\\n",
       "0                   Aruba         ABW     10.244           78.9   \n",
       "1             Afghanistan         AFG     35.253            5.9   \n",
       "2                  Angola         AGO     45.985           19.1   \n",
       "3                 Albania         ALB     12.877           57.2   \n",
       "4    United Arab Emirates         ARE     11.044           88.0   \n",
       "..                    ...         ...        ...            ...   \n",
       "190           Yemen, Rep.         YEM     32.947           20.0   \n",
       "191          South Africa         ZAF     20.850           46.5   \n",
       "192      Congo, Dem. Rep.         COD     42.394            2.2   \n",
       "193                Zambia         ZMB     40.471           15.4   \n",
       "194              Zimbabwe         ZWE     35.715           18.5   \n",
       "\n",
       "             IncomeGroup  \n",
       "0            High income  \n",
       "1             Low income  \n",
       "2    Upper middle income  \n",
       "3    Upper middle income  \n",
       "4            High income  \n",
       "..                   ...  \n",
       "190  Lower middle income  \n",
       "191  Upper middle income  \n",
       "192           Low income  \n",
       "193  Lower middle income  \n",
       "194           Low income  \n",
       "\n",
       "[195 rows x 5 columns]"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "id": "bea63827-7ea5-42e7-8193-0cbf1b374928",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 699.25x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "vi6 = snsb.lmplot(data = df, x ='InternetUsers', y ='BirthRate', fit_reg= True, hue='IncomeGroup') # hue for color\n",
    "plt.show(vi6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac452c1c-5063-4937-be4a-5c1005d8474c",
   "metadata": {},
   "source": [
    "Learn on Pandas and seaborn\n",
    "\n",
    "1. Importing data into python\n",
    "2. Dataframe via pandas\n",
    "3. exploring datasets: head(), tail() describe()\n",
    "4. Renaminig columns\n",
    "5. subsetting dataframes\n",
    "6. Basic operations with dataframes\n",
    "7. filter data frames\n",
    "8. seaborn introduction -- .distplot, .displot, .lmplot(), lmplot(fit_reg_ | outliner| hue parameter\n",
    "9. univariate, bivariate, multivariate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e4e56b8b-1d05-47a5-81a2-10e934a2946c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96e807dd-456a-4456-9500-8da2a4ef5dd0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59668ae0-824a-4687-bd37-5c7b5967e60b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0eb4930d-dbe2-4c94-8481-4fd690c04463",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
